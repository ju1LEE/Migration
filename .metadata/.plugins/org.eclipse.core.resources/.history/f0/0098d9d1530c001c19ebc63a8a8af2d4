<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
    
    <!-- pattern Layout -->
    <!-- 디폴트 패턴 적용, "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  		 <PatternLayout />
  		 패턴	                               설명
  		c, logger	로깅 이벤트를 발생시키기 위해 선택한 로거의 이름을 출력
		C, class	로깅 이벤트가 발생한 클래스의 풀네임명을 출력
		M, method	로깅 이벤트가 발생한 메서드명을 출력
		F, file	로깅 이벤트가 발생한 클래스의 파일명을 출력
		l, location	로깅 이벤트가 발생한 클래스의 풀네임명.메서드명(파일명:라인번호)를 출력
		d, date	로깅 이벤트의 일자와 시간을 출력,\\SimpleDateFormat클래스에 정의된 패턴으로 출력 포맷 지정가능
		L, line	로깅 이벤트가 발생한 라인 번호를 출력
		m, msg, message	로그문에서 전달된 메시지를 출력
		n	줄바꿈
		p, level	로깅 이벤트의 레벨을 출력
		r, relative	로그 처리시간 (milliseconds)
		t, thread	로깅 이벤트가 발생한 스레드명을 출력
		%%	%를 출력하기 위해 사용하는 패턴
     -->
    
    <Appenders>
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d %5p [%c] %m%n" />
        </Console>
	 	<!-- RollingFile appender -->
	 	<!-- attribute: name(Appender명), fileName(target파일명), append(이어쓰기여부, true(default) or false), locking, immediateFlush, ignoreExceptions, bufferedIO -->
 		<!-- element: Layout(출력패턴설정), Filters -->
		<!-- append="false"이면 매번 로깅 시 기존 로그 파일을 clear하고 새로 로깅 -->
		<RollingFile name="rollingfile" fileName="C:/eGovFrame-3.5.1/ErrorLog_log4j/app.log"
                 filePattern="C:/eGovFrame-3.5.1/ErrorLog_log4j/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log">
	      <PatternLayout>
	        <PatternLayout pattern="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n" />
	      </PatternLayout>
	      <Policies>
	        <TimeBasedTriggeringPolicy interval="1" modulate="true"/><!-- 6시간 간격, interval 속성을 이용해 rolling 간격을 지정할 수 있다. -->
	        <SizeBasedTriggeringPolicy size="250 MB"/><!-- size 단위: Byte(default), KB, MB, or GB -->
	      </Policies>
	      <!-- 기존 maxIndex 속성이 Strategy 엘리먼트로 변경됨 -->
  		  <!-- index는 min(default 1)부터 max(default 7)까지 증가, 아래에는 max="3"으로 settting -->
  		  <!-- fileIndex="min"이므로 target file의 size가 1000 byte를 넘어가면, fileIndex가 1(min)인 history file에 백업 (fixed window strategy) -->
  		  <!-- 그 다음 1000 byte를 넘어가면, rollingSample.1.log을 rollingSample.2.log 파일에 복사하고, target 파일을 rollingSample.1.log에복사한 후 target 파일에 새로 로깅 -->
	      <DefaultRolloverStrategy max="20"/>
	    </RollingFile>
    </Appenders>
    
    <!-- 아래 내용은 테스트한 결과입니다. 
    	Logger name으로 log 적용 범위 결정 가능하다 
    	예를 들어 [egovframework.covision.gw.web.LogConnectController]에서 debug를 찍었을 경우
    	egovframework.covision logger를 통해서 로그가 찍히게 된다.
    	additivity="false"를 주게 되면 로그 계층 구조에서 한번만 찍히게 된다.
    -->
    <Loggers>
        <!-- sql -->
        <Logger name="java.sql" level="INFO" additivity="false">
            <AppenderRef ref="console" />
        </Logger>
        <!-- log SQL with timing information, post execution -->
        <Logger name="jdbc.sqltiming" level="INFO" additivity="false">
            <AppenderRef ref="console" />
        </Logger>
        <!-- Query Loggers -->
	    <logger name="jdbc.sqlonly" additivity="false">  
	        <level value="INFO"/>  
	        <Appender-ref ref="console"/>  
	    </logger>
	    <logger name="jdbc.resultsettable" additivity="false">  
	        <level value="INFO"/>  
	        <Appender-ref ref="console"/>  
	    </logger>  
        
        <!-- sql -->
        <Logger name="java.sql" level="INFO" additivity="false">
            <AppenderRef ref="console" />
        </Logger>
        <Logger name="egovframework" level="ERROR" additivity="false">
            <AppenderRef ref="console" />
            <AppenderRef ref="rollingfile" />
        </Logger>
        <Logger name="egovframework.covision" level="DEBUG" additivity="false">
        	<AppenderRef ref="console" />
        	<AppenderRef ref="rollingfile" />
        </Logger>
		
		<!-- MDC 방식 Logger 끝 -->
        <Root level="INFO">
        	<AppenderRef ref="console" />
        </Root>
    </Loggers>
</Configuration>
