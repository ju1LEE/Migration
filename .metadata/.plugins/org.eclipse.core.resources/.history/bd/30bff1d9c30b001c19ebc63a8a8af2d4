package egovframework.covision.coviflow.migration;

import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.apache.commons.codec.binary.Base64;
import org.json.XML;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import net.sf.json.JSONObject;

public class MigrationProcess {
	
	Map<String, String> processIDMap;
	
	public MigrationProcess() throws Exception {
		this.processIDMap = new HashMap<String, String>();
		
		InsertNewData newDataSvc = new InsertNewData();
		this.processIDMap = newDataSvc.selectProcessIDMappingData();
		
		Set key = processIDMap.keySet();
		String keyName = "";
		
		for (Iterator iterator = key.iterator(); iterator.hasNext();) {
			keyName = (String) iterator.next();
		}
	}
	
	// DSCR Data를 xml에서 json으로 변환
	public String getDSCRString(String DSCR, String key){
		String returnData = "";
		JSONObject dscrObj = new JSONObject();
		org.json.JSONObject dscrObjTemp = new org.json.JSONObject();
		
		dscrObjTemp = XML.toJSONObject(DSCR);
		dscrObj = JSONObject.fromObject(dscrObjTemp.toString());
		dscrObj = dscrObj.getJSONObject("ClientAppInfo").getJSONObject("App").getJSONObject("forminfos").getJSONObject("forminfo");
		
		if(dscrObj.has(key)){
			returnData = dscrObj.getString(key);
		}else{
			if(key.equals("reserved_time")){
				returnData = null;
			}
		}
		
		return returnData;
	}
	
	// Domain Data를 xml에서 json으로 변환
	public String makeDomainData(String domainData) throws Exception{
		String returnData = "";
		org.json.JSONObject domainDataTemp = new org.json.JSONObject();
		
		Document document = convertStringToDocument(domainData);
		
        XPath xpath = XPathFactory.newInstance().newXPath();
        
        NodeList cols = (NodeList)xpath.evaluate("//comment", document, XPathConstants.NODESET);
        for( int idx=0; idx<cols.getLength(); idx++ ){
        	String comment = new String(Base64.encodeBase64(cols.item(idx).getTextContent().getBytes()));
        	cols.item(idx).setTextContent("");
        	((Element)cols.item(idx)).setAttribute("text", comment);
        }
        
        cols = (NodeList)xpath.evaluate("//taskinfo/@customattribute1", document, XPathConstants.NODESET);
        for( int idx=0; idx<cols.getLength(); idx++ ){
        	cols.item(idx).setTextContent("");
        }
        
        // TODO 
        // customattribute2 값에 ClientAppInfo 데이터가 XML 형태의 값으로 들어가는 경우에 대한 처리 (운영일 경우 불필요한 ClientAppInfo가 들어가므로 지움)
        // 해당 데이터에 대결사유가 들어갈 경우, 대결사유 문자열만 빼서 넣어주어야 함
        cols = (NodeList)xpath.evaluate("//taskinfo/@customattribute2", document, XPathConstants.NODESET);
        for( int idx=0; idx<cols.getLength(); idx++ ){
        	cols.item(idx).setTextContent("");
        }
        
        
        cols = (NodeList)xpath.evaluate("//taskinfo/@wiid", document, XPathConstants.NODESET);
        for( int idx=0; idx<cols.getLength(); idx++ ){
        	cols.item(idx).setTextContent("");
        }
        
        domainData = convertDocumentToString(document);
        domainDataTemp = XML.toJSONObject(domainData);
		
		returnData = domainDataTemp.toString().replaceAll("\"text\"", "\"#text\"");
		
		return returnData;
	}
	
	// String을 Document로
	private static Document convertStringToDocument(String xmlStr) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  
        DocumentBuilder builder;  
        try  
        {  
            builder = factory.newDocumentBuilder();  
            Document doc = builder.parse( new InputSource( new StringReader( xmlStr ) ) ); 
            return doc;
        } catch (Exception e) {  
            e.printStackTrace();  
        } 
        return null;
    }
	
	// Document를 String으로
	private static String convertDocumentToString(Document doc) {
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer;
        try {
            transformer = tf.newTransformer();
            // below code to remove XML declaration
            // transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            String output = writer.getBuffer().toString();
            return output;
        } catch (TransformerException e) {
            e.printStackTrace();
        }
        
        return null;
    }

}
